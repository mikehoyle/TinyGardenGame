#+TITLE Tiny Garden Game Journal

* 06/13/2022
  Continued procrastination through refactorization with slow solid progres. I
  added simple plant placement (with no real meaning to adding them), and trench
  digging.

  I refactored tile flags to include a water proximity to more easily determine
  specific plant placement.

  I feel like there were many other small things, but they escape me. More
  attention was given to collisions once again (to remove map collisionsn from
  the quadtree, which was silly in the first place).

* 06/06/2022
  While I was wanting to move on to more functional game features, I couldn't
  really get over how unappealing it was having the main character be a hovering
  sidescroller sprite. As a result, I took a turn towards the animation
  direction, and did some re-tooling to better enable animated sprites.

  This will definitely need to be refined in the future, but will work for now.

  I also spent a lot of time acquainting myself with pixel art work in general,
  and isometric art specifics. After some playing around, my takeaway is that I
  will need a LOT more practice if it's something I want to be even remotely
  acceptable at. The upside is there's really no requirement for me to be
  acceptible at all. I could always make a fully functional game and then
  commission the art.

  All that is dangerously forward-looking at this stage, because it presumes I
  make a fully functional game in the first place. So, time to turn my eyes back
  towards that.

  The main things in my sights right now are:

  1. Placing "plants"
  2. Digging water

  Likely for both, but definitely for the first, I think I really will want some
  way to select what will be placed, and for that, I need to introduce a HUD.
  That is especially important because I am intent on making a controller-first
  game, so I don't/won't just have a million hotkeys to work with.

  That will be the next focus then, pre-empting the others. It should be easy
  enough, because it will not be involved in the ECS system and I can just bang
  out a system of my own. Also, because the viewport is a fixed set of pixels in
  resolution that will just be scaled, I can make the stand-in assets really
  easily as well.

  We are getting dangerously close to me needing to actually have some concrete
  game mechanics figured out, which I am still very wish-washy on. I need a few
  more dedicated brainstorms of the mechanics alone.

  There's a little bit of an unfortunate chicken-egg problem there, where I
  really want to be able to toy with mechanics real-time in a prototype, but I
  don't want to code in gameplay for mechanics there's no chance I'll use.
  Hopefully I'll clarify some things for myself mentally in the next few days
  before moving much further.

* 06/04/2022
  Today I went in with the goal of making water non-walkable, and then making it
  so the player can interact and "trench" water, which I imagine to be one of
  the game mechanics.

  The first challenge was collisions. For a bit I contended with how water
  collsions should work without seeming super tedious before it dawned on me:
  Just allow the "edge" of water to be walkable, and only consider "deep" water
  (i.e. tiles that are fully surrounded by water themselves) to be
  non-traversable.

  So moving forward on that I first procrastinated with a bunch of
  not-really-necessary refactoring, and then moved on to the actual map
  collisions.

  And.. that kind of vexxed me. The easiest way that came to me was simply
  adding all the non-traversable tiles as collision actors in the plug-and-play
  Monogame.Extended library I've been using, but that gave me a lot of concerns.
  Just to take a shot in the dark (and in the spirit of "use it if it works
  right now") I tried it and my fears were confirmed. Adding a ton of extra
  collision components was just not worth it.

  In the end, the Extended collision library doesn't exactly fit my needs for
  many reasons:
  - It seems to be mainly intended for physics simulations with many moving
    actors, but my game has few moving actors (right now..) and many stationary
    ones.
  - There's no way to differentiate between stationary actors, which could never
    collide with anything on their own accord, and moving actors, which are
    really the only ones to be concerned about.
  - The integration with ECS was clumsy in the first place, and required a lot
    of allocation of "mirror" objects that represented entities but weren't,
    which felt like an antipattern ready to rear its ugly head at any moment.
  - There is no good way to represent the current viewport, even though in many
    cases collisions aren't really very relevant away from sight (at least, not
    right now).

  The main takeaway is that I probably just need to build my own. It hopefully
  shouldn't be too terribly complicated, but a close eye needs to be kept on
  efficiency. I will probably highjack anything and everything I can from the
  ECS system, but better accomodate the constraints above.

  This feels like a left field back into engine-work when I was hoping to really
  proceed with game mechanics, but it should at the very least be interesting
  work, and I think even in the short term I'll appreciate having significantly
  more control over the collisions logic.
  
* 06/03/2022
  Very quick update today. We have water! Well, the appearance of water at
  least, with no functionality. Also uncovered the extreme uncleanliness of code
  rendering tiles which have awareness of their surroundings. It's really messy
  right now, but is at least enough to work with.
  
* 06/02/2022
  I've moved cleanly over to my own map generation and rendering and away from
  Tiled (and the associated Extended tools that go with Tiled). This may be for
  better or for worse -- for now, definitely worse -- but should give me the
  flexibility to do some more of the fun generation stuff I hope to do.

  Tiled may well provide that functionality, but in the same spirit of choosing
  the Monogame framework in the first place, I'd rather spend a little more time
  doing it myself and knowing exactly what's happening in-game than to spend
  ages learning a specialized tool, and not really know what's going on inside
  the magic black box.

  I'm opening up a few questions for myself as I start this map generation. The
  first is, assuming I want a bounded map, is loading the entire map (i.e. all
  the metadata of all the tiles) into memory at once a good idea? That certainly
  makes things a lot easier on myself, but I worry about memory constraints a
  little. Hopefully modern machines having a ton a RAM just glazes over that
  problem.

  Let's do some quick math to figure out if my concerns are well-founded, before
  I go creating some sort of unneccessary solution to a possible non-problem.

  Estimating on the (hopefully) high end:

  - Map = 1000 x 1000 tiles
    - At current provisional player speed of 3 tiles/second, that's enough map
      for the player  to travel from end to end in
      (1000/3 = 333sec =) about 5.5 minutes.

      That's pretty big. Assuming a brisk human jogging speed of 6mph (=2.6
      meters/sec), that means the map would would be (1000 * (2.6/3) =) 866
      meters wide, almost a kilometer.

      Practically speaking, probably too big unless I were to introduce
      teleportation or vehicle mechanics. Let's keep it as an upper bound just
      in case. Who knows, both teleportation and vehicles are fun!
  - Each tile holds 1000 bytes of state
    - That's about 2 bytes for every pixel in a basic tile sprite, including
      transparency. Which is.. completely arbitrary, and probably not
      technically exactly possible due to C# memory management, but seems like a
      pretty reasonable upper bound -- that's a lot of state

  That leaves us with 1000*1000*1000 = 1_000_000_000 bytes = 1GB

  Whew that's a lot of memory for a little game. Now my estimates were
  intentionally high so practically we probably wouldn't expect even half that,
  but that's *just* the map, and then there's the rest of the assets and game
  state on top of that.

  I could start to use a system where I load chunks into memory asynchronously,
  but boy would that be a pain in the ass. Let's see if any additional
  constraints help our case.

  - Case: each tile only holds 16bytes state (C# minimum according to some
    stackoverflow
    - That's only *16MB*, which is incredibly manageable.

  Honestly, do I need to go on from there? After all, how much complexity does a
  single map tile really need? I've been playing around with the concept of
  doing some clever animation stuff like procedurally generating an organization
  of weeds and grass on a given tile, but tha could be done by just storing a
  RNG seed and regenrating randomly every time.

  Or, for such a small tile the data could likely even be munged into one or two
  int32s.

  This trades off some computational complexity, but most of that shouldn't be
  needed unless the tile is actually on-screen, so shouldn't scale with number
  of tiles. Other more complex, over-time calculations will probably be done
  with other entities and handled in the ECS system.

* 06/01/2022
  A concise set of changes to introduce loading bars for "growing" components.
  This should be the first step in the eventual direction to animate growth
  entirely (one way or another).

  Creating another drawable component that responds to progress reinforced what
  I've already been experiencing: sticking strictly to the ECS framework is kind
  of a pain-in-the-ass, and really isn't all as flexible as it's cut out to be.
  I might start to break pretty soon and create some ECS anti-patterns, like
  component inheritance (something I basically already did by making a Drawable
  component contain an implementation of a generic interface).

  All-in-all I doubt I really will need the ostensible performance gains an ECS
  design will offer me, but hey, there may come a time where I feel like I do.

  We're on the very fringe of getting into the intimidating actual work relevant
  to the game. I'm not quite sure to start in many ways. Many of my ideas are
  still pretty loose ideas, and it feels bad to commit hours of development work
  to something that might not need to be there (even worse if that thing
  requires changes that make it hard to rip back out once I'm done).

  For now, I'm going to turn my eyes towards map generation. I'm tired of
  looking at this ugly Tiled map I created, and procedural generation is
  something I'm excited about.. even if I don't really have anything to
  procedurally generate at the moment. Once a more "final" -- or at least
  slightly less temporary -- map system is in place, I can start to add some
  functional map components, like water.

* 05/31/2022
  Okay so, sprite rendering depth in isometric is hard. What I've started with
  is simply sorting the sprites by the abolute (i.e. final rendering) Y value,
  which is back-to-front from the viewers perspective. The issue is, the entire
  sprite is rendered at that depth. So if I have for example my test plant
  sprite, which is 2x2 tiles and one-ish tile high, that ends up meaning that
  the player always renders in front of it properly (yay!), but when behind it,
  will appear in front of it if the player happens to be below the origin of the
  object (which is its NW-most point, i.e. top-most from the viewer's
  perspective.

  Time to do some reading, because this is surely a solved problem, and I'd
  prefer to not bang my head against it longer than necessary. I fear I may have
  to create some sort of secondary sprite for each sprite added that represents
  depth information (although there would be worse things).

  ...

  I finally got something working well enough, for now. I have a sneaking
  suspicion more complex sprites will seriously test the system and require some
  refinement, but it's enough to move forward. As it stands, the system is this:
  - Register sprite components in basic layers
  - On render, sort all sprite components:
    - If on different layers, sort to the lower layer, else
    - Sort self "in front" if SE corner (which faces the player) is greater than
      (X&Y) the comparee's origin (NW corner).
  
* 05/30/2022
  I built the framework for a loading screen which loads all the components
  ahead of time, which means I can finally stop grieving over how I do my
  mid-game loading of assets (and the game is so small it should never matter
  *fingers crossed*).

  I started the very simple components of a timed growth system, but want to add
  in a progress bar, at the very least for debug, so I can see what the hell is
  going on. This sort of thing is where the ECS really starts to be a pain in
  the ass. I need to create a loading bar entity that's loosely tied to the
  actual thing it's referencing. Or maybe a better idea I'm having as I write
  this, simply include a sprite in every growth instance and have the renderer
  handle that separately.

  This is getting at the more pressing of the tasks I need to tackle ASAP:
  layering in the rendering process. Right now there's essentially two stages:
  render the map, then everything else in whatever order it was added. Obviously
  not functional even now in the most basic state. My general plan moving
  forward is to render in four primary layers:
   - Map layer
     - Rendered in order from N -> E, moving in rows to the S
   - Sprite layer
     - Each sprite will be rendered in order of how far "back" it should be from
       the camera, based on its map position. There may be some significant
       complications here for larger sprites, will have to cross that bridge
       when I come to it
   - Overlay layer
     - Persistent overlay/HUD components such as health bars, etc
   - Menu layer
     - Overtop all the rest, UI menus.

  Also, dear god I'm regretting making south be negative, it's against every
  grain. Even after I *just* changed all tile coordinates to be the NW corner
  rather than the center, I think I want to do another pass to reverse N & S.
  Literally all the tooling assumes right & down are positive.
* 05/29/2022
  Trying to build some very basic collision today. The Monogame Extended
  collision library, frustratingly, does not integrate with their ECS system, so
  I'm trying to add a compatibiliy system to still ride on its coattail.

  I'm ending the night with collision working! Kind of.. everything (of the two
  things) knows where each other are, but are kind of pushing against each
  other, even if they should be stationary. Next step is to seperate the
  "movement" system from the "input" system, so I can follow these steps:
  - Capture input & record intended movement
  - Detect potential collisions from movement and modify movement accordingly
  - Actually execute the move

  I'll need to make sure the plan accomodates for two+ moving actors, which is
  currently outside of my simple test environment. Something to keep in mind
  moving forward (and a technical debt to very much avoid, knowing multiplayer
  could be a desire).

* 05/28/2022 afternoon
** Development
  Addition of determining selected tile (currently only directly adjacent), and
  a debug indicator for that tile. Along with the indicator, a full debug system
  to hopefully more easily enable future debug features.
  
** Brainstorming & Early Game Thoughts
  Now's a good time to get down some of my general ideas and ongoing
  brainstorming so they don't get forgotten into the abyss.

  * Premise
    You are a tiny gardener within a garden plot, seeking to expand the
    growth around you, promote and attract plant and animal life, and fend off
    pesky garden pests and diseases.

  * Unique elements (What makes it worth making)
    - The nature components stay natural and emulate natural processes
      (i.e. no "sunflower turrets" or "poppy seed shooting pistols")
      - I may waver on this one... we'll see.
    - Unique nature-based mechanics as a challenge, not just "combat"

  * Gameplay
    - Essentially a PvE RTS/defense game of expansion and base-building (but
      with plants)
    - *The core fun component* is that it should be enjoyable to overcome a
      variety of challenges to expand your creation, and satisfying to
      base-build through visual, creative, and organizational appeal.
    - You control a single character and interact with the world through them
    - You plant seeds and they grow in real time, on their own, given the resources
    - Resources include:
      - *Water*, which you can channel from puddles to create irrigation
      - *Sun*, Maybe there's a day/night cycle? Maybe some mechanics cast shade?
      - *Pollination*, Plants which require pollination must have pollinators
        nearby, attracted by plants such as flowers.
    - Threats are somewhat like Pandemic gameplay -- procedurally produced and spread
      - *Diseases* (Mold, Powdery mildew, rot, others..)
      - *Pests* (aphids, worms, slugs, birds, etc...)
      - *Nutrient deficiencies* and other environmental problems.
  * Open ideas (Maybes and questions)
    - What is the ultimate goal of the game?
      - Reach a randomly-generated set of achievements a-la SDV Board game?
      - Eradicate all threats on the map (a-la Pandemic, Minesweeper)?
      - "Tech up" to a certain point (a-la Factorio)? Mechanics not clear on this.
      - Demolish some sort of enemy "base"? (What would that be, staying true to
        the nature theme?
    - Day/night cycle
      - Maybe planting fungi etc that would grow better at night (what else
        would happen at night).
    - Grow "zones" of full sun, partial sun, full shade which accomodate
      different plants.
    - "Bases" (garden sheds?) which are a hub for grown resources (and
      "researching" seeds?)
      - Some method of "auto-gathering" near a base? Dare I suggeset insects?
    - How are seeds obtained? How does one "tech up?"
* 05/28/2022
  First entry, it's been a week or so of messing around with Monogame and
  getting acquainted with the framework. I have a rough idea of a game.. which
  keeps developing as time goes on. The hope is to keep the scope achievable.
  What started as a plant-based RTS idea may become more of a tech-up and
  survive type of single player game, just to avoid multiplayer hurdles.

  I've decided to go isometric for no reason other than it feels right. I have a
  simple test sprite moving to keyboard input in an isometric map built in
  Tiled, and a camera which follows the character at the right scale. It's a
  start.

  Isometric is already turning out to be a pain in the ass, but I think it will
  pay visual dividends if I can get to the point in the project where that's
  relevant.

  I also invested some time in getting an in-game console system up and running
  early (mostly on the back of MonogameConsole, which I had to minorly port).
